#Requires -RunAsAdministrator

<#
.SYNOPSIS
    Stage 1: Configures the system for a long-term Attack Surface Reduction (ASR) audit.
.DESCRIPTION
    This script increases the Microsoft Defender event log size to 256MB and sets all 
    ASR rules to Audit Mode (value '2') to allow for passive data collection without
    impacting user activity.
#>

# --- Configuration ---
$logName = 'Microsoft-Windows-Windows Defender/Operational'
$logSizeInMB = 512
$logSizeInBytes = $logSizeInMB * 1024 * 1024

# --- 1. Increase Event Log Size ---
Write-Host "Attempting to set the max size of the '$logName' event log to $($logSizeInMB)MB..." -ForegroundColor Cyan
try {
    wevtutil.exe sl $logName /ms:$logSizeInBytes
    Write-Host "Success! Log size has been configured." -ForegroundColor Green
}
catch {
    Write-Error "Failed to set the log size. Ensure you are running this script as an Administrator. Error: $($_.Exception.Message)"
    # Exit if we can't set the log size, as data might be lost.
    return
}


# --- 2. Set All ASR Rules to Audit Mode ---

# Master list of all ASR rule GUIDs from Microsoft documentation.
$allAsrRuleGuids = @(
    "56a863a9-875e-4185-98a7-b882c64b5ce5", # Block abuse of exploited vulnerable signed drivers
    "7674ba52-37eb-4a4f-a9a1-f0f9a1619a2c", # Block Adobe Reader from creating child processes
    "d4f940ab-401b-4efc-aadc-ad5f3c50688a", # Block all Office applications from creating child processes
    "e6db77e5-3df2-4cf1-b95a-636979351e5b", # Block content from email client and webmail
    "9e6c4e1f-7d60-472f-ba1a-a39ef669e4b2", # Block credential stealing from lsass.exe
    "c1db55ab-c21a-4637-bb3f-a12568109d35", # Use advanced protection against ransomware
    "3b576869-a4ec-4529-8536-b80a7769e899", # Block Office applications from creating executable content
    "75668c1f-73b5-4cf0-bb93-3ecf5cb7cc84", # Block Office applications from injecting code into other processes
    "26190899-1602-49e8-8b27-eb1d0a1ce869", # Block Office communication application from creating child processes
    "e2db16fe-9cf2-42bb-b01e-23aaa8153a85", # Block persistence through WMI event subscription
    "d1e49aae-8d6b-48fb-8ab2-ac79251ae590", # Block process creations originating from PSExec and WMI commands
    "b2b3f03d-6a65-4f7b-a94f-1ac27146b984", # Block untrusted and unsigned processes that run from USB
    "5beb7efe-fd9a-4556-801d-275e5ffc04cc", # Block execution of potentially obfuscated scripts
    "d3e037e1-3453-4e0e-943a-db3417de7d0f", # Block JavaScript or VBScript from launching downloaded executable content
    "01443614-cd74-433a-b99e-2ecdc07bfc25"  # Block executable files from running unless they meet a prevalence, age, or trusted list criterion
)

# Create a corresponding array of actions, setting every rule to '2' (Audit Mode).
$auditActions = $allAsrRuleGuids | ForEach-Object { "2" }

Write-Host "`nAttempting to set all ASR rules to Audit Mode..." -ForegroundColor Cyan

try {
    Set-MpPreference -AttackSurfaceReductionRules_Ids $allAsrRuleGuids -AttackSurfaceReductionRules_Actions $auditActions -ErrorAction Stop
    Write-Host "Success! All ASR rules have been configured for auditing." -ForegroundColor Green
}
catch {
    Write-Error "Failed to set ASR rules. Ensure Windows Defender is active. Error: $($_.Exception.Message)"
    return
}

Write-Host "`nSystem configuration is complete. Please continue using the computer normally for the next 30-60 days." -ForegroundColor Yellow
