#Requires -RunAsAdministrator

<#
.SYNOPSIS
    Stage 3: Analyzes the Windows Defender event log to report on ASR rule audit events.
.DESCRIPTION
    This definitive version parses the underlying XML of each event to reliably extract all key data,
    including the correct Rule GUID, User, Process, and Target, and presents it in a clear report.
#>

# --- Master list of all ASR rules with descriptions for human-readable reporting ---
$asrRules = @(
    [pscustomobject]@{ Name = "Block abuse of exploited vulnerable signed drivers"; Guid = "56a863a9-875e-4185-98a7-b882c64b5ce5" },
    [pscustomobject]@{ Name = "Block Adobe Reader from creating child processes"; Guid = "7674ba52-37eb-4a4f-a9a1-f0f9a1619a2c" },
    [pscustomobject]@{ Name = "Block all Office applications from creating child processes"; Guid = "d4f940ab-401b-4efc-aadc-ad5f3c50688a" },
    [pscustomobject]@{ Name = "Block content from email client and webmail"; Guid = "e6db77e5-3df2-4cf1-b95a-636979351e5b" },
    [pscustomobject]@{ Name = "Block credential stealing from lsass.exe"; Guid = "9e6c4e1f-7d60-472f-ba1a-a39ef669e4b2" },
    [pscustomobject]@{ Name = "Use advanced protection against ransomware"; Guid = "c1db55ab-c21a-4637-bb3f-a12568109d35" },
    [pscustomobject]@{ Name = "Block Office applications from creating executable content"; Guid = "3b576869-a4ec-4529-8536-b80a7769e899" },
    [pscustomobject]@{ Name = "Block Office applications from injecting code into other processes"; Guid = "75668c1f-73b5-4cf0-bb93-3ecf5cb7cc84" },
    [pscustomobject]@{ Name = "Block Office communication application from creating child processes"; Guid = "26190899-1602-49e8-8b27-eb1d0a1ce869" },
    [pscustomobject]@{ Name = "Block persistence through WMI event subscription"; Guid = "e2db16fe-9cf2-42bb-b01e-23aaa8153a85" },
    [pscustomobject]@{ Name = "Block process creations originating from PSExec and WMI commands"; Guid = "d1e49aae-8d6b-48fb-8ab2-ac79251ae590" },
    [pscustomobject]@{ Name = "Block untrusted and unsigned processes that run from USB"; Guid = "b2b3f03d-6a65-4f7b-a94f-1ac27146b984" },
    [pscustomobject]@{ Name = "Block execution of potentially obfuscated scripts"; Guid = "5beb7efe-fd9a-4556-801d-275e5ffc04cc" },
    [pscustomobject]@{ Name = "Block JavaScript or VBScript from launching downloaded executable content"; Guid = "d3e037e1-3453-4e0e-943a-db3417de7d0f" },
    [pscustomobject]@{ Name = "Block executable files from running unless they meet a prevalence, age, or trusted list criterion"; Guid = "01443614-cd74-433a-b99e-2ecdc07bfc25" }
)

# --- Script Engine ---
Write-Host "Analyzing the Windows Defender event log for ASR events. This may take a moment..." -ForegroundColor Cyan

$logName = 'Microsoft-Windows-Windows Defender/Operational'
$eventIDs = @(1121, 1122) # 1121 = Block, 1122 = Audit
$allAsrEvents = Get-WinEvent -FilterHashtable @{LogName=$logName; ID=$eventIDs} -ErrorAction SilentlyContinue

# --- Process Events using XML for Reliability ---
$processedEvents = $allAsrEvents | ForEach-Object {
    # Convert the event to XML to reliably access named data fields
    $eventXml = [xml]$_.ToXml()
    
    # Helper function to find data by its name in the XML, much more reliable than index number
    $getData = { param($name) ($eventXml.Event.EventData.Data | Where-Object { $_.Name -eq $name }).'#text' }
    
    # The real Rule GUID is in a field named 'ID' inside the XML data
    $ruleGuid = $getData.Invoke('ID')
    $ruleFriendlyName = ($asrRules | Where-Object { $_.Guid -eq $ruleGuid }).Name
    if (-not $ruleFriendlyName) { $ruleFriendlyName = "Unknown Rule (GUID: $ruleGuid)" }

    # Create a custom object with correctly mapped properties
    [PSCustomObject]@{
        Time        = $_.TimeCreated
        EventID     = $_.ID
        RuleName    = $ruleFriendlyName
        RuleGUID    = $ruleGuid
        User        = $getData.Invoke('User')
        Process     = $getData.Invoke('Path')
        Target      = $getData.Invoke('Process Name')
        FullMessage = $_.Message
    }
}

# --- 1. Executive Summary ---
Write-Host "`n" + ("="*70)
Write-Host "ASR AUDIT REPORT: EXECUTIVE SUMMARY" -ForegroundColor Yellow
Write-Host ("="*70)

if (-not $processedEvents) {
    Write-Host "`nNo ASR events found in the log. All rules were silent during the audit period." -ForegroundColor Green
    return
}

$triggeredRulesGrouped = $processedEvents | Group-Object -Property RuleGUID
$triggeredRuleGuids = $triggeredRulesGrouped.Name

Write-Host "`nTotal ASR Events Found: $($processedEvents.Count)"
Write-Host "Total Unique Rules Triggered: $($triggeredRulesGrouped.Count)"
Write-Host "Total Rules Silent: $($asrRules.Count - $triggeredRulesGrouped.Count)"

# --- 2. Triggered Rules Details ---
Write-Host "`n" + ("="*70)
Write-Host "DETAILS: TRIGGERED RULES" -ForegroundColor Yellow
Write-Host ("="*70)

foreach ($group in $triggeredRulesGrouped) {
    $ruleGuid = $group.Name
    $ruleInfo = $asrRules | Where-Object { $_.Guid -eq $ruleGuid }
    $ruleName = if ($ruleInfo) { $ruleInfo.Name } else { "Unknown Rule" }

    Write-Host "`nRule: $ruleName" -ForegroundColor Cyan
    Write-Host "  - GUID: $ruleGuid"
    Write-Host "  - Total Triggers: $($group.Count)"
    Write-Host "  - Affected Applications:"
    
    $processGroup = $group.Group | Group-Object -Property Process | Sort-Object Count -Descending
    foreach ($process in $processGroup) {
        Write-Host ("    - {0,-10} {1}" -f "Triggers: $($process.Count)", "Process: $($process.Name)")
    }
}

# --- 3. Silent Rules List ---
Write-Host "`n" + ("="*70)
Write-Host "DETAILS: SILENT RULES (No Events Detected)" -ForegroundColor Yellow
Write-Host ("="*70)
Write-Host "`nThese rules had no audit events and are strong candidates for enforcement." -ForegroundColor Green

$silentRules = $asrRules | Where-Object { $_.Guid -notin $triggeredRuleGuids }
if ($silentRules) {
    $silentRules | ForEach-Object { Write-Host " - $($_.Name)" }
} else {
    Write-Host " - None. All rules were triggered at least once."
}

# --- 4. Chronological Event Log ---
Write-Host "`n" + ("="*70)
Write-Host "DETAILS: CHRONOLOGICAL EVENT LOG" -ForegroundColor Yellow
Write-Host ("="*70)

# Display the processed collection as a list for maximum clarity
$processedEvents | Format-List Time, EventID, RuleName, User, Process, Target, FullMessage

